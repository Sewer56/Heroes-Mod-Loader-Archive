using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SonicHeroes.ASMInjections.Overwrite
{
    /// <summary>
    /// This class defines fun assembly injections which you may perform to alter the state of the game and game flow. This is a collection of previously made assembly modifications and hacks.
    /// </summary>
    public class SonicHeroes_ASMInjections
    {

        /// <summary>
        /// This will allow you to insert appropriate opcodes to entirely disable the screen transition when a stage is completed.
        /// </summary>
        public class ScreenTransition_GameCompletion_Disable
        {
            byte[] DisableScreenTransition = new byte[6] { 0xB0, 0xFF, 0xB2, 0xFF, 0xB1, 0xFF };
        }

        /// <summary>
        /// This assembly injection will force the loading of real Super Sonic, Super Tails and Super Knuckles into stages. To execute, write the approprtiate bytes at the appropriate addresses e.g. write SuperSonic1 at SuperSonic1Address.
        /// </summary>
        public class TeamSuper_Always_Enable
        {
            int SuperSonic1Address = 0x5CBEB9;
            int SuperSonic2Address = 0x5CC0EA;
            int SuperSonic3Address = 0x5CBFDF;
            int SuperTails1Address = 0x5B7FDD;
            int SuperTails2Address = 0x5B7DE9;
            int SuperTails3Address = 0x5B7ECB;
            int SuperKnuckles1Address = 0x5C1D6B;
            int SuperKnuckles2Address = 0x5C1E52;
            int SuperKnuckles3Address = 0x5C1E7A;

            byte[] SuperSonic1 = new byte[7] { 0xC6, 0x86, 0xC2, 0x00, 0x00, 0x00, 0x01 };
            byte[] SuperSonic2 = new byte[5] { 0xE8, 0xCA, 0xFD, 0xFF, 0xFF };
            byte[] SuperSonic3 = new byte[7] { 0x80, 0xBE, 0xC2, 0x00, 0x00, 0x00, 0x01 };

            byte[] SuperTails2 = new byte[7] { 0xC6, 0x86, 0xC2, 0x00, 0x00, 0x00, 0x01 };
            byte[] SuperTails1 = new byte[5] { 0xE8, 0x07, 0xFE, 0xFF, 0xFF };
            byte[] SuperTails3 = new byte[7] { 0x80, 0xBE, 0xC2, 0x00, 0x00, 0x00, 0x01 };

            byte[] SuperKnuckles2 = new byte[12] { 0xC6, 0x86, 0xC2, 0x00, 0x00, 0x00, 0x01, 0xE9, 0xB2, 0xFD, 0xFF, 0xFF };
            byte[] SuperKnuckles3 = new byte[5] { 0xE8, 0xCA, 0xFD, 0xFF, 0xFF };
            byte[] SuperKnuckles1 = new byte[7] { 0x80, 0xBE, 0xC2, 0x00, 0x00, 0x00, 0x01 };
        }

        /// <summary>
        /// This will allow you to reduce the rank requirement for super hard mode and have super hard mode unlock if your emblem rank is equal or higher to the required rank. The game normally only checks for 'equal'.
        /// </summary>
        public class Unlock_Super_Hard_At_Rank_X_Or_Higher
        {
            int InjectionAddress = 0x62F030;
            byte[] SuperHardAlternateUnlock = new byte[144] { 0x0F, 0xBE, 0x59, 0xF4, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x19, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x0C, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x10, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x1C, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x20, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x2C, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x38, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x83, 0xC1, 0x50, 0x4E, 0x75, 0xB3, 0x8D, 0x8F, 0x77, 0x04, 0x00, 0x00, 0xBE, 0x07, 0x00, 0x00, 0x00, 0x0F, 0xBE, 0x59, 0xFC, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x19, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x04, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x0F, 0xBE, 0x59, 0x08, 0x3B, 0xDA, 0x7C, 0x01, 0x40, 0x83, 0xC1, 0x10, 0x4E, 0x75, 0xD7, 0x0F, 0xBE, 0x8F, 0xE3, 0x04, 0x00, 0x00, 0x3B, 0xCA, 0x5E, 0x5B, 0x7C, 0x01, 0x40, 0xC3 };
        }


        /// <summary>
        /// This will set the framerate of 2P Mode to same as set in the configuration utility.
        /// </summary>
        public class SplitScreen_Framerate_Same_As_Config
        {
            int InjectionAddress = 0x402CFC;
            byte[] InjectionBytes = new byte[5] { 0xA1, 0xB0, 0xAE, 0x8C, 0x00 };
        }

        /// <summary>
        /// Remember that debugging function with "1P INFO" and a few bits of information on a blue bar? This should enable it.
        /// </summary>
        public class Enable_Debugging_Mode_Function
        {
            int InjectionAddress1 = 0x61D35D;
            int InjectionAddress2 = 0x61D376;

            byte[] InjectionBytes1 = new byte[15] { 0xEB, 0x17, 0x90, 0x90, 0x90, 0x90, 0xC6, 0x05, 0x48, 0x0B, 0xA6, 0x00, 0x01, 0xEB, 0xE4 };
            byte[] InjectionBytes2 = new byte[15] { 0xEB, 0x17, 0x90, 0x90, 0x90, 0x90, 0xC6, 0x05, 0x48, 0x0B, 0xA6, 0x00, 0x01, 0xEB, 0xE4 };
        }
    }
}
